{
	"info": {
		"_postman_id": "3864a0d1-d307-448e-8d78-6f7e51491f25",
		"name": "Restful_Booker_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41770506",
		"_collection_link": "https://www.postman.com/aerospace-meteorologist-39907379/workspace/qa-assessment/collection/41770506-3864a0d1-d307-448e-8d78-6f7e51491f25?action=share&source=collection_link&creator=41770506"
	},
	"item": [
		{
			"name": "CreateToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (Token created successfully)\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains a valid token\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"token\");\r",
							"    pm.expect(jsonData.token).to.be.a(\"string\").and.to.have.length.above(0);\r",
							"\r",
							"\r",
							"    pm.environment.set(\"authToken\", jsonData.token);\r",
							"    console.log(\"Auth token saved: \" + jsonData.token);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is correct, booking created\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"pm.test(\"Booking ID is present and stored\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"bookingid\");\r",
							"    pm.environment.set(\"bookingId\", jsonData.bookingid);\r",
							"    console.log(\"Booking ID stored: \" + jsonData.bookingid);\r",
							"});\r",
							"\r",
							"pm.test(\"Response structure and field validation\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.booking).to.include.keys([\r",
							"        \"firstname\", \"lastname\", \"totalprice\", \"depositpaid\", \"bookingdates\", \"additionalneeds\"\r",
							"    ]);\r",
							"    pm.expect(jsonData.booking.bookingdates).to.include.keys([\"checkin\", \"checkout\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response data matches request\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.booking.firstname).to.equal(pm.environment.get(\"randomFirstName\"));\r",
							"    pm.expect(jsonData.booking.lastname).to.equal(pm.environment.get(\"randomLastName\"));\r",
							"    pm.expect(jsonData.booking.totalprice).to.equal(Number(pm.environment.get(\"totalPrice\")));\r",
							"    \r",
							"    let expectedDepositPaid = pm.environment.get(\"depositPaid\") === \"true\"; \r",
							"    pm.expect(jsonData.booking.depositpaid).to.equal(expectedDepositPaid);\r",
							"    pm.expect(jsonData.booking.bookingdates.checkin).to.equal(pm.environment.get(\"checkinDate\"));\r",
							"    pm.expect(jsonData.booking.bookingdates.checkout).to.equal(pm.environment.get(\"checkoutDate\"));\r",
							"    pm.expect(jsonData.booking.additionalneeds).to.equal(pm.environment.get(\"additionalNeeds\"));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check-in date is before checkout date\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let checkin = new Date(jsonData.booking.bookingdates.checkin);\r",
							"    let checkout = new Date(jsonData.booking.bookingdates.checkout);\r",
							"    pm.expect(checkout).to.be.above(checkin);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const totalPrice = Math.floor(Math.random() * 151) + 50;  // random between 50-200\r",
							"\r",
							"let today = new Date();\r",
							"let checkinDaysAhead = Math.floor(Math.random() * 11);  // random 0-10 days from today\r",
							"let checkinDate = new Date(today);\r",
							"checkinDate.setDate(today.getDate() + checkinDaysAhead);\r",
							"\r",
							"\r",
							"let checkoutDaysAfterCheckin = Math.floor(Math.random() * 5) + 1; // Rand for checkout > 1 day after check-in, up to 5 days after\r",
							"let checkoutDate = new Date(checkinDate);\r",
							"checkoutDate.setDate(checkinDate.getDate() + checkoutDaysAfterCheckin);\r",
							"\r",
							"const formatDate = (date) => date.toISOString().split('T')[0];\r",
							"\r",
							"pm.environment.set(\"checkinDate\", formatDate(checkinDate));\r",
							"pm.environment.set(\"checkoutDate\", formatDate(checkoutDate));\r",
							"\r",
							"\r",
							"const depositPaid = Math.random() < 0.5 ? \"true\" : \"false\"; // Rand for depositpaid\r",
							"pm.environment.set(\"depositPaid\", depositPaid);\r",
							"console.log(\"DEBUG: depositPaid value set in env ->\", depositPaid);\r",
							"\r",
							"\r",
							"const additionalNeedsOptions = [\"Breakfast\", \"Lunch\", \"Dinner\", \"None\"];// rand for additional needs\r",
							"const additionalNeeds = additionalNeedsOptions[Math.floor(Math.random() * additionalNeedsOptions.length)];\r",
							"pm.environment.set(\"additionalNeeds\", additionalNeeds);\r",
							"\r",
							"\r",
							"pm.environment.set(\"randomFirstName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));\r",
							"pm.environment.set(\"randomLastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"));\r",
							"\r",
							"pm.environment.set(\"totalPrice\", totalPrice);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstname\": \"{{randomFirstName}}\",\r\n  \"lastname\": \"{{randomLastName}}\",\r\n  \"totalprice\": \"{{totalPrice}}\",\r\n  \"depositpaid\": {{depositPaid}},\r\n  \"bookingdates\": {\r\n    \"checkin\": \"{{checkinDate}}\",\r\n    \"checkout\": \"{{checkoutDate}}\"\r\n  },\r\n  \"additionalneeds\": \"{{additionalNeeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookingIds",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (Booking IDs retrieved successfully)\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains a list of booking IDs\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.be.an(\"array\");  // check if an array\r",
							"    pm.expect(jsonData.length).to.be.above(0); // check at least one booking ID exists\r",
							"\r",
							"  \r",
							"    jsonData.forEach(function (item) {\r",
							"        pm.expect(item).to.have.property(\"bookingid\"); // check if array have booking id\r",
							"        pm.expect(item.bookingid).to.be.a(\"number\");//check if have number\r",
							"    });\r",
							"\r",
							"    console.log(\"Total bookings retrieved: \" + jsonData.length);// my debugs\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/booking",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (Booking retrieved successfully)\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response structure and field validation\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData).to.include.keys([\r",
							"        \"firstname\", \"lastname\", \"totalprice\", \"depositpaid\", \"bookingdates\", \"additionalneeds\"\r",
							"    ]);\r",
							"    \r",
							"    pm.expect(jsonData.bookingdates).to.include.keys([\"checkin\", \"checkout\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response data matches stored booking ID\", function () {\r",
							"    let bookingIdUsed = pm.environment.get(\"bookingId\"); \r",
							"    console.log(\"DEBUG: Booking ID used for retrieval ->\", bookingIdUsed);\r",
							"    \r",
							"    pm.expect(bookingIdUsed).to.not.be.undefined;\r",
							"    pm.expect(bookingIdUsed).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response data matches expected values\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    \r",
							"    pm.expect(jsonData.firstname).to.equal(pm.environment.get(\"randomFirstName\"));\r",
							"    pm.expect(jsonData.lastname).to.equal(pm.environment.get(\"randomLastName\"));\r",
							"    pm.expect(jsonData.totalprice).to.equal(Number(pm.environment.get(\"totalPrice\")));\r",
							"    \r",
							"    let expectedDepositPaid = pm.environment.get(\"depositPaid\") === \"true\"; \r",
							"    pm.expect(jsonData.depositpaid).to.equal(expectedDepositPaid);\r",
							"    \r",
							"    pm.expect(jsonData.bookingdates.checkin).to.equal(pm.environment.get(\"checkinDate\"));\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.equal(pm.environment.get(\"checkoutDate\"));\r",
							"    \r",
							"    pm.expect(jsonData.additionalneeds).to.equal(pm.environment.get(\"additionalNeeds\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Check-in date is before checkout date\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    \r",
							"    let checkin = new Date(jsonData.bookingdates.checkin);\r",
							"    let checkout = new Date(jsonData.bookingdates.checkout);\r",
							"    \r",
							"    pm.expect(checkout).to.be.above(checkin);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (Booking updated successfully)\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response structure and field validation\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.include.keys([\r",
							"        \"firstname\", \"lastname\", \"totalprice\", \"depositpaid\", \"bookingdates\", \"additionalneeds\"\r",
							"    ]);\r",
							"\r",
							"    pm.expect(jsonData.bookingdates).to.include.keys([\"checkin\", \"checkout\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response data matches updated values\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.firstname).to.equal(pm.environment.get(\"updatedFirstName\"));\r",
							"    pm.expect(jsonData.lastname).to.equal(pm.environment.get(\"updatedLastName\"));\r",
							"    pm.expect(jsonData.totalprice).to.equal(Number(pm.environment.get(\"updatedTotalPrice\")));\r",
							"\r",
							"    let expectedDepositPaid = pm.environment.get(\"updatedDepositPaid\") === \"true\";\r",
							"    pm.expect(jsonData.depositpaid).to.equal(expectedDepositPaid);\r",
							"\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.equal(pm.environment.get(\"updatedCheckinDate\"));\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.equal(pm.environment.get(\"updatedCheckoutDate\"));\r",
							"\r",
							"    pm.expect(jsonData.additionalneeds).to.equal(pm.environment.get(\"updatedAdditionalNeeds\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Check-in date is before checkout date\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    let checkin = new Date(jsonData.bookingdates.checkin);\r",
							"    let checkout = new Date(jsonData.bookingdates.checkout);\r",
							"\r",
							"    pm.expect(checkout).to.be.above(checkin);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"updatedFirstName\", \"John\");\r",
							"pm.environment.set(\"updatedLastName\", \"Doe\");\r",
							"pm.environment.set(\"updatedTotalPrice\", \"250\");\r",
							"pm.environment.set(\"updatedDepositPaid\", \"true\");\r",
							"pm.environment.set(\"updatedCheckinDate\", \"2025-03-01\");\r",
							"pm.environment.set(\"updatedCheckoutDate\", \"2025-03-05\");\r",
							"pm.environment.set(\"updatedAdditionalNeeds\", \"Dinner\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstname\": \"{{updatedFirstName}}\",\r\n  \"lastname\": \"{{updatedLastName}}\",\r\n  \"totalprice\": \"{{updatedTotalPrice}}\",\r\n  \"depositpaid\": {{updatedDepositPaid}},\r\n  \"bookingdates\": {\r\n    \"checkin\": \"{{updatedCheckinDate}}\",\r\n    \"checkout\": \"{{updatedCheckoutDate}}\"\r\n  },\r\n  \"additionalneeds\": \"{{updatedAdditionalNeeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PartialUpdateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 (Booking partially updated successfully)\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response structure and field validation\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.include.keys([\r",
							"        \"firstname\", \"lastname\", \"totalprice\", \"depositpaid\", \"bookingdates\", \"additionalneeds\"\r",
							"    ]);\r",
							"\r",
							"    pm.expect(jsonData.bookingdates).to.include.keys([\"checkin\", \"checkout\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response data matches partially updated values\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.firstname).to.equal(pm.environment.get(\"patchedFirstName\"));\r",
							"    pm.expect(jsonData.lastname).to.equal(pm.environment.get(\"patchedLastName\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Non-updated fields remain unchanged (assumption request send after UpdateBooking -test chained)\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    let expectedTotalPrice = Number(pm.environment.get(\"updatedTotalPrice\"));\r",
							"    let expectedDepositPaid = pm.environment.get(\"updatedDepositPaid\") === \"true\";\r",
							"    let expectedCheckinDate = pm.environment.get(\"updatedCheckinDate\");\r",
							"    let expectedCheckoutDate = pm.environment.get(\"updatedCheckoutDate\");\r",
							"    let expectedAdditionalNeeds = pm.environment.get(\"updatedAdditionalNeeds\");\r",
							"\r",
							"\r",
							"    pm.expect(jsonData.totalprice).to.equal(expectedTotalPrice);\r",
							"    pm.expect(jsonData.depositpaid).to.equal(expectedDepositPaid);\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.equal(expectedCheckinDate);\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.equal(expectedCheckoutDate);\r",
							"    pm.expect(jsonData.additionalneeds).to.equal(expectedAdditionalNeeds);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"patchedFirstName\", \"Michael\");\r",
							"pm.environment.set(\"patchedLastName\", \"Smith\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstname\": \"{{patchedFirstName}}\",\r\n  \"lastname\": \"{{patchedLastName}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 (Booking deleted successfully)\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify response confirms deletion\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Created\");\r",
							"});\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: pm.environment.get(\"baseUrl\") + \"/booking/\" + pm.environment.get(\"bookingId\"),\r",
							"    method: \"GET\",\r",
							"    header: {\r",
							"        \"Accept\": \"application/json\"\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    pm.test(\"Booking no longer exists (404 Not Found)\", function () {\r",
							"        pm.expect(res.code).to.equal(404);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.environment.unset(\"bookingId\");\r",
							"console.log(\"DEBUG: Booking ID removed from environment after deletion.\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{authToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/booking/{{bookingId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "HealthCheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 (API is healthy)\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response confirms API is running\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Created\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/ping",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		}
	]
}